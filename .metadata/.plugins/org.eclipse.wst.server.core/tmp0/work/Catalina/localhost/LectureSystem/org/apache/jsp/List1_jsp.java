/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M9
 * Generated at: 2017-05-24 01:45:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class List1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write(" <head>\r\n");
      out.write(" <meta http-equiv=\"Content-Type\" content=\"text/html; charset=EUC-KR\">\r\n");
      out.write(" <title>AJAX Chat Client</title>\r\n");
      out.write(" <style>\r\n");
      out.write("  #chat_msg { font-family: fantasy; }\r\n");
      out.write(" </style>\r\n");
      out.write(" <script type=\"text/javascript\" src=\"xhr.js\"></script>\r\n");
      out.write(" <script type=\"text/javascript\" src=\"json2.js\"></script>\r\n");
      out.write(" <script type=\"text/javascript\">\r\n");
      out.write(" var getReq = createRequest();\r\n");
      out.write(" var sendReq = createRequest();\r\n");
      out.write(" var msgid = 0;\r\n");
      out.write(" var timerId = 0;\r\n");
      out.write(" /* 메시지입력란에 입력된 메시지를 JSON문자열로 변환하여 서버로 전송*/\r\n");
      out.write("function send(){\r\n");
      out.write("  var sm = form1.send_msg.value;\r\n");
      out.write("  if(sm==''){\r\n");
      out.write("   alert(\"입력한 메시지가 없습니다\");\r\n");
      out.write("   form1.send_msg.focus();\r\n");
      out.write("   return;\r\n");
      out.write("  }\r\n");
      out.write("  var url = \"chat_server.jsp\";\r\n");
      out.write("  sendReq.open(\"POST\", url, true);\r\n");
      out.write("  sendReq.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\r\n");
      out.write("  sendReq.onreadystatechange = sendResultHandler;\r\n");
      out.write("  var jobj = {};\r\n");
      out.write("  jobj.msgid=msgid;\r\n");
      out.write("  jobj.content=sm;\r\n");
      out.write("  var params = jobj.toJSONString();\r\n");
      out.write("  clearTimeout(timerId);\r\n");
      out.write("  sendReq.send(\"msg=\"+params);\r\n");
      out.write("  form1.send_msg.value='';\r\n");
      out.write(" }\r\n");
      out.write("\r\n");
      out.write("/* 메시지입력후 엔터키를 친 경우 폼의 전송을 막고 send()호출 */\r\n");
      out.write("function keyDownHandler(e){\r\n");
      out.write("  if(window.event.keyCode==13) {\r\n");
      out.write("   if(window.event) event.returnValue = false;\r\n");
      out.write("   else e.preventDefault();\r\n");
      out.write("   send();\r\n");
      out.write("  }\r\n");
      out.write(" }\r\n");
      out.write("\r\n");
      out.write("/* 프로그램 시작시 2초후에 getChatText()호출하여 서버상의 최근 메시지 ID를 가져옴*/\r\n");
      out.write("function onLoadHandler(){\r\n");
      out.write("  form1.send_msg.focus();\r\n");
      out.write("  timerId = window.setTimeout(\"getChatText()\", 2000);\r\n");
      out.write(" }\r\n");
      out.write("\r\n");
      out.write("/* 주기적으로 호출되어 새로운 메시지를 가져옴 */\r\n");
      out.write("function getChatText(){\r\n");
      out.write("  var jsonObj = {};\r\n");
      out.write("  jsonObj.msgid=msgid;\r\n");
      out.write("  var url = \"chat_server.jsp?msg=\"+jsonObj.toJSONString();\r\n");
      out.write("  getReq.open(\"GET\", url, true);\r\n");
      out.write("  getReq.onreadystatechange = msgReceivedHandler;\r\n");
      out.write("  getReq.send(null);\r\n");
      out.write(" }\r\n");
      out.write("\r\n");
      out.write("/* getChatText()으로 요청결과로 서버측 응답이 도착했을 때 데이터 처리*/\r\n");
      out.write("function msgReceivedHandler(){\r\n");
      out.write("     if(getReq.readyState==4 && getReq.status==200){\r\n");
      out.write("      var xmlDoc = getReq.responseXML;\r\n");
      out.write("      var jsonStr = null;\r\n");
      out.write("      if(xmlDoc!=null){\r\n");
      out.write("        try{\r\n");
      out.write("        jsonStr = xmlDoc.documentElement.firstChild.nodeValue;\r\n");
      out.write("        }catch(xmlDocNull){/*alert(jsonStr); */}\r\n");
      out.write("      }\r\n");
      out.write("      if(jsonStr!=null && jsonStr.length!=0) {\r\n");
      out.write("       var jsonArray = eval('('+jsonStr+')');\r\n");
      out.write("       var jsonObj = null;\r\n");
      out.write("       for(var i=0;i<jsonArray.length;i++){\r\n");
      out.write("        jsonObj = jsonArray[i];\r\n");
      out.write("        if(jsonObj.content==null)break;\r\n");
      out.write("        var div = document.getElementById(\"chat_msg\");\r\n");
      out.write("        div.innerHTML += jsonObj.userId+\": \"+jsonObj.content+\"<br/>\";\r\n");
      out.write("        div.scrollTop = div.scrollHeight;\r\n");
      out.write("       }\r\n");
      out.write("       msgid = jsonObj.msgid;\r\n");
      out.write("      }\r\n");
      out.write("      timerId = setTimeout(\"getChatText()\",2000);\r\n");
      out.write("     }\r\n");
      out.write(" }\r\n");
      out.write("\r\n");
      out.write("/* 메시지입력 후 엔터나 버튼을 눌러서 send()메소드의 요청결과 */\r\n");
      out.write("function sendResultHandler(){\r\n");
      out.write("     if(sendReq.readyState==4 && sendReq.status==200){\r\n");
      out.write("      clearTimeout(timerId);\r\n");
      out.write("      getChatText();\r\n");
      out.write("     }\r\n");
      out.write(" }\r\n");
      out.write(" </script>\r\n");
      out.write(" <style type=\"text/css\">\r\n");
      out.write("  #chat_msg {\r\n");
      out.write("   width:99%; height:99%; overflow: auto;\r\n");
      out.write("   background-color: #eeee99; text-align: left;\r\n");
      out.write("   font-size: 15pt;\r\n");
      out.write("   margin-bottom: 20px;\r\n");
      out.write("  }\r\n");
      out.write("  div.outer { \r\n");
      out.write("   background-color:#dddddd;\r\n");
      out.write("   border-color 1px solid black;\r\n");
      out.write("   width:300px; height:400px;\r\n");
      out.write("   text-align: center;\r\n");
      out.write("  }\r\n");
      out.write("  input.chatbox { width:280px; }\r\n");
      out.write(" </style>\r\n");
      out.write(" </head>\r\n");
      out.write(" <body onLoad=\"onLoadHandler();\"><br/><br/><center>\r\n");
      out.write("<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\r\n");
      out.write("\t<tr height=\"5\"><td width=\"5\"></td></tr>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\t<tr height=\"1\" bgcolor=\"#000000\">\r\n");
      out.write("\t\t<td colspan=\"6\"></td></tr>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<div class=\"outer\">\r\n");
      out.write("  <div id=\"chat_msg\"></div>\r\n");
      out.write("  <form name=\"form1\">\r\n");
      out.write("  메시지 <input class=\"chatbox\" type=\"text\" name=\"send_msg\" onKeyDown=\"keyDownHandler(event);\"/>\r\n");
      out.write("  <input type=\"button\" value=\"전 송\" onClick=\"send();\"/>\r\n");
      out.write("  </form>\r\n");
      out.write(" </div>\r\n");
      out.write(" </center>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" <div style=\"position:absolute; right:0px; bottom:0px;\">\r\n");
      out.write("<table>\r\n");
      out.write("\t<tr height=\"1\" bgcolor=\"#82B5DF\">\r\n");
      out.write("\t\t<td colspan=\"6\" width=\"752\"></td>\r\n");
      out.write("\t</tr>\r\n");
      out.write(" </table>\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\r\n");
      out.write("  <tr><td colspan=\"4\" height=\"5\"></td></tr>\r\n");
      out.write("  <tr align=\"right\">\r\n");
      out.write("\r\n");
      out.write("   <td>\r\n");
      out.write("<form action=\"selectMove.jsp\" method=\"post\" >\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<select name=\"List\">\r\n");
      out.write("    \t  <option value=\"1\">질문게시판</option>\r\n");
      out.write("          <option value=\"2\">자료공유게시판</option>\r\n");
      out.write("          <option value=\"3\">과제게시판</option>\r\n");
      out.write("          <option value=\"4\">설정</option>\r\n");
      out.write("\t\t</select>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<input type=\"submit\" value=\"이동\">\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</td>\r\n");
      out.write("\r\n");
      out.write("  </tr>\r\n");
      out.write("\t</table>\r\n");
      out.write(" </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
